{"version":3,"sources":["components/Timer/TimerDisplay.jsx","components/Timer/Timer.jsx","components/Countdown/CountdownDisplay.jsx","components/Countdown/CountdownInputSlider.jsx","components/Countdown/CountdownInputMinutes.jsx","components/Countdown/CountdownInputSeconds.jsx","components/Countdown/CountdownInputBlock.jsx","components/Countdown/CountdownProgress.jsx","components/Countdown/Countdown.jsx","components/Clock/ClockDisplay.jsx","components/Clock/Clock.jsx","components/TechnicalTask/TechnicalTask.jsx","App.jsx","index.jsx"],"names":["TimerDisplay","props","timerValue","formatedTime","item","split","slice","join","milliseconds","seconds","Math","trunc","minutes","displayTimerValue","className","Timer","state","startTime","saveValue","isPaused","isStart","handleStart","Date","now","setState","timerID","setTimeout","tick","handleReset","clearTimeout","this","type","onClick","React","Component","CountdownDisplay","displayValue","value","valueToString","String","length","CountdownSlider","onChange","changeTimerValue","isDisabled","min","max","step","disabled","InputMinutes","isNaN","style","margin","InputSeconds","CountdownInputBlock","CountdownProgress","percentTime","percent","Countdown","totalTime","isFinish","id","newTimerValue","calculateTimeProcent","ceil","pauseToggle","playAudio","audio","Audio","preload","src","play","inputBlockProps","ClockDisplay","currentTime","currentMs","Clock","setInterval","clearInterval","newTime","ms","getMilliseconds","toString","toLocaleTimeString","TechnicalTask","App","TabPane","Tabs","href","alt","tab","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64042165.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './TimerDisplay.css';\r\n\r\nexport default function TimerDisplay(props) {\r\n  const { timerValue } = props;\r\n\r\n  const formatedMilliseconds = (item) => {\r\n    const result = ('00' + item).split('').slice(-3).join('');\r\n    return result;\r\n  };\r\n\r\n  const formatedTime = (item) => {\r\n    const result = ('0' + item).split('').slice(-2).join('');\r\n    return result;\r\n  };\r\n\r\n  let milliseconds = formatedMilliseconds(timerValue % 1000);\r\n  let seconds = formatedTime(Math.trunc(timerValue / 1000));\r\n  let minutes = formatedTime(Math.trunc(timerValue / (1000 * 60)));\r\n  let hours = formatedTime(Math.trunc(timerValue / (1000 * 60 * 60)));\r\n\r\n  const displayTimerValue = hours + ':' + minutes + ':' + seconds + ':' + milliseconds;\r\n\r\n  return (\r\n    <div className=\"timer-display-wrapper\">\r\n      <span className=\"heading\">Секундомер</span>\r\n      <span className=\"current-time\">{displayTimerValue}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nTimerDisplay.propTypes = {\r\n  currentTime: PropTypes.number,\r\n};\r\n","import React from 'react';\r\n\r\nimport './Timer.css';\r\nimport { Button } from 'antd';\r\nimport TimerDisplay from './TimerDisplay';\r\n\r\nexport default class Timer extends React.Component {\r\n  state = {\r\n    timerValue: 0,\r\n    startTime: 0,\r\n    saveValue: 0,\r\n    isPaused: true,\r\n    isStart: true,\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    let { startTime, timerValue, isPaused, saveValue } = this.state;\r\n\r\n    if (isPaused) {\r\n      clearTimeout(this.timerID);\r\n      return;\r\n    }\r\n\r\n    const currentTime = Date.now();\r\n    timerValue = saveValue + currentTime - startTime;\r\n    this.setState({\r\n      timerValue,\r\n    });\r\n    this.timerID = setTimeout(() => this.tick(), 17);\r\n  }\r\n\r\n  handleStart = () => {\r\n    let { isPaused, isStart, timerValue, saveValue } = this.state;\r\n\r\n    if (isPaused && isStart) {\r\n      const startTime = Date.now();\r\n      this.setState({\r\n        isPaused: false,\r\n        isStart: false,\r\n        startTime,\r\n      });\r\n      this.timerID = setTimeout(() => this.tick(), 17);\r\n    } else if (isPaused && !isStart) {\r\n      const startTime = Date.now();\r\n      this.setState({\r\n        isPaused: false,\r\n        startTime,\r\n      });\r\n      this.timerID = setTimeout(() => this.tick(), 17);\r\n    } else if (!isPaused && !isStart) {\r\n      saveValue = timerValue;\r\n      this.setState({\r\n        saveValue,\r\n        startTime: 0,\r\n        isPaused: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleReset = () => {\r\n    const startTime = Date.now();\r\n    this.setState({\r\n      timerValue: 0,\r\n      startTime,\r\n      saveValue: 0,\r\n      isStart: true,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { timerValue } = this.state;\r\n    return (\r\n      <div className=\"timer-container\">\r\n        <TimerDisplay timerValue={timerValue} />\r\n        <div className=\"btn-container\">\r\n          <div className=\"btn\">\r\n            <Button type=\"primary\" onClick={this.handleStart}>\r\n              <span className=\"btn-span\">Пуск/пауза</span>\r\n            </Button>\r\n          </div>\r\n          <div className=\"btn\">\r\n            <Button type=\"primary\" onClick={this.handleReset}>\r\n              <span className=\"btn-span\">&nbsp;&nbsp;Сбросить&nbsp;</span>\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './CountdownDisplay.css';\r\n\r\nexport default function CountdownDisplay(props) {\r\n  let { timerValue } = props;\r\n\r\n  const displayValue = (value) => {\r\n    const valueToString = String(value);\r\n    const result = valueToString.length < 2 ? '0' + valueToString : valueToString;\r\n    return result;\r\n  };\r\n  const minutes = displayValue(Math.trunc(timerValue / 60));\r\n  const seconds = displayValue(Math.trunc(timerValue % 60));\r\n\r\n  return (\r\n    <div className=\"countdownDisplayContainer\">\r\n      <h1>\r\n        {minutes}:{seconds}\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nCountdownDisplay.propTypes = {\r\n  minutes: PropTypes.number,\r\n  seconds: PropTypes.number,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './CountdownInputSlider.css';\r\nimport { Slider } from 'antd';\r\n\r\nexport class CountdownSlider extends React.Component {\r\n  onChange = (value) => {\r\n    const { changeTimerValue } = this.props;\r\n    const id = 'slider';\r\n    changeTimerValue(value, id);\r\n  };\r\n\r\n  render() {\r\n    const { isDisabled, timerValue } = this.props;\r\n    return (\r\n      <Slider\r\n        min={0}\r\n        max={3600}\r\n        step={15}\r\n        value={timerValue}\r\n        onChange={this.onChange}\r\n        disabled={isDisabled}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nCountdownSlider.propTypes = {\r\n  isDisabled: PropTypes.bool,\r\n  value: PropTypes.number,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './CountdownInputMinutes.css';\r\nimport { InputNumber, Row } from 'antd';\r\n\r\nexport class InputMinutes extends React.Component {\r\n  onChange = (value) => {\r\n    if (isNaN(value)) {\r\n      return;\r\n    }\r\n    const { changeTimerValue } = this.props;\r\n    const id = 'minutes';\r\n\r\n    changeTimerValue(value, id);\r\n  };\r\n\r\n  render() {\r\n    const { isDisabled, timerValue } = this.props;\r\n    const value = Math.trunc(timerValue / 60);\r\n    return (\r\n      <Row>\r\n        <InputNumber\r\n          min={0}\r\n          max={720}\r\n          style={{ margin: '0 16px' }}\r\n          value={value}\r\n          onChange={this.onChange}\r\n          step={1}\r\n          disabled={isDisabled}\r\n        />\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nInputMinutes.propTypes = {\r\n  isDisabled: PropTypes.bool,\r\n  value: PropTypes.number,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './CountdownInputSeconds.css';\r\nimport { InputNumber, Row } from 'antd';\r\n\r\nexport class InputSeconds extends React.Component {\r\n  onChange = (value) => {\r\n    if (isNaN(value)) {\r\n      return;\r\n    }\r\n    const { changeTimerValue } = this.props;\r\n    const id = 'seconds';\r\n    changeTimerValue(value, id);\r\n  };\r\n\r\n  render() {\r\n    const { isDisabled, timerValue } = this.props;\r\n    const value = Math.trunc(timerValue % 60);\r\n    return (\r\n      <Row>\r\n        <InputNumber\r\n          min={0}\r\n          max={59}\r\n          style={{ margin: '0 16px' }}\r\n          value={value}\r\n          onChange={this.onChange}\r\n          step={1}\r\n          disabled={isDisabled}\r\n        />\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nInputSeconds.propTypes = {\r\n  isDisabled: PropTypes.bool,\r\n  value: PropTypes.number,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './CountdownInputBlock.css';\r\nimport { CountdownSlider } from './CountdownInputSlider';\r\nimport { InputMinutes } from './CountdownInputMinutes';\r\nimport { InputSeconds } from './CountdownInputSeconds';\r\n\r\nexport default function CountdownInputBlock(props) {\r\n  const { timerValue, changeTimerValue, isDisabled } = props;\r\n  return (\r\n    <div className=\"input-block__wrapper\">\r\n      <div>\r\n        <CountdownSlider\r\n          changeTimerValue={changeTimerValue}\r\n          timerValue={timerValue}\r\n          isDisabled={isDisabled}\r\n        />\r\n      </div>\r\n      <div className=\"input-minutes__container\">\r\n        <span className=\"input-minutes__label\">Минуты:</span>\r\n        <div className=\"input-minutes\">\r\n          <InputMinutes\r\n            changeTimerValue={changeTimerValue}\r\n            timerValue={timerValue}\r\n            isDisabled={isDisabled}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"input-seconds__container\">\r\n        <span className=\"input-seconds__label\">Секунды:</span>\r\n        <div className=\"input-seconds\">\r\n          <InputSeconds\r\n            changeTimerValue={changeTimerValue}\r\n            timerValue={timerValue}\r\n            isDisabled={isDisabled}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCountdownInputBlock.propTypes = {\r\n  changeMinutes: PropTypes.func,\r\n  changeSeconds: PropTypes.func,\r\n  changeValueFromSlider: PropTypes.func,\r\n  isDisabled: PropTypes.bool,\r\n  timerValue: PropTypes.number,\r\n};\r\n","import React from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nimport { Progress } from 'antd';\r\n\r\nexport default function CountdownProgress(props) {\r\n  const { percentTime } = props;\r\n  return <Progress type=\"circle\" percent={percentTime} />;\r\n}\r\n\r\nCountdownProgress.propTypes = {\r\n  percentTime: propTypes.number,\r\n};\r\n","import React from 'react';\r\n\r\nimport './Countdown.css';\r\nimport { Button } from 'antd';\r\nimport CountdownDisplay from './CountdownDisplay';\r\nimport CountdownInputBlock from './CountdownInputBlock';\r\nimport CountdownProgress from './CountdownProgress';\r\n\r\nexport default class Countdown extends React.Component {\r\n  state = {\r\n    timerValue: 0,\r\n    totalTime: 0,\r\n    percentTime: 0,\r\n    isPaused: true,\r\n    isDisabled: false,\r\n    isFinish: true,\r\n  };\r\n\r\n  changeTimerValue = (value, id) => {\r\n    let { timerValue } = this.state;\r\n    let minutes = Math.trunc(timerValue / 60);\r\n    let seconds = Math.trunc(timerValue % 60);\r\n\r\n    switch (id) {\r\n      case 'minutes':\r\n        minutes = value;\r\n        break;\r\n      case 'seconds':\r\n        seconds = value;\r\n        break;\r\n      case 'slider':\r\n        minutes = Math.trunc(value / 60);\r\n        seconds = Math.trunc(value % 60);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (minutes >= 720) {\r\n      seconds = 0;\r\n    }\r\n\r\n    const newTimerValue = minutes * 60 + seconds;\r\n    this.setState({\r\n      timerValue: newTimerValue,\r\n    });\r\n  };\r\n\r\n  calculateTimeProcent = () => {\r\n    const { timerValue, totalTime } = this.state;\r\n    const percentTime = Math.ceil(100 - (timerValue * 100) / totalTime);\r\n    this.setState({\r\n      percentTime,\r\n    });\r\n  };\r\n\r\n  pauseToggle = () => {\r\n    this.setState({\r\n      isPaused: !this.state.isPaused,\r\n    });\r\n  };\r\n\r\n  playAudio = () => {\r\n    var audio = new Audio();\r\n    audio.preload = 'auto';\r\n    audio.src = 'https://interactive-examples.mdn.mozilla.net/media/examples/t-rex-roar.mp3';\r\n    audio.play();\r\n  };\r\n\r\n  handleStart = () => {\r\n    const { timerValue, isFinish, isPaused } = this.state;\r\n\r\n    if (timerValue === 0) {\r\n      return;\r\n    }\r\n\r\n    switch (isFinish) {\r\n      case true:\r\n        if (isPaused) {\r\n          const totalTime = timerValue;\r\n          this.setState({\r\n            totalTime,\r\n            isDisabled: true,\r\n            isPaused: false,\r\n            isFinish: false,\r\n          });\r\n          this.timerID = setTimeout(() => this.tick(), 1000);\r\n        } else {\r\n          clearTimeout(this.timerID);\r\n          this.pauseToggle();\r\n        }\r\n        break;\r\n      case false:\r\n        if (isPaused) {\r\n          this.pauseToggle();\r\n          this.timerID = setTimeout(() => this.tick(), 1000);\r\n        } else {\r\n          clearTimeout(this.timerID);\r\n          this.pauseToggle();\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  tick = () => {\r\n    const { isPaused, timerValue } = this.state;\r\n\r\n    this.calculateTimeProcent();\r\n\r\n    if (isPaused) {\r\n      clearTimeout(this.timerID);\r\n      return;\r\n    }\r\n\r\n    if (timerValue === 0) {\r\n      clearTimeout(this.timerID);\r\n      this.setState({\r\n        isPaused: true,\r\n        isDisabled: false,\r\n        isFinish: true,\r\n      });\r\n      this.playAudio();\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      timerValue: timerValue - 1,\r\n    });\r\n\r\n    this.timerID = setTimeout(this.tick, 1000);\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      timerValue: 0,\r\n      percentTime: 0,\r\n      isPaused: true,\r\n      isDisabled: false,\r\n      isFinish: true,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { timerValue, percentTime, isDisabled } = this.state;\r\n    const inputBlockProps = {\r\n      changeTimerValue: this.changeTimerValue,\r\n      timerValue,\r\n      isDisabled,\r\n    };\r\n\r\n    return (\r\n      <div className=\"countdown-container\">\r\n        <span className=\"heading\">Счетчик обратного времени</span>\r\n        <div className=\"display-progress-container\">\r\n          <div className=\"display-progress-flex-box\">\r\n            <CountdownDisplay timerValue={timerValue} />\r\n          </div>\r\n          <div className=\"display-progress-flex-box\">\r\n            <CountdownProgress percentTime={percentTime} />\r\n          </div>\r\n        </div>\r\n        <div className=\"input-field-buttons-container \">\r\n          <div className=\"input-field-container\">\r\n            <CountdownInputBlock {...inputBlockProps} />\r\n          </div>\r\n\r\n          <div className=\"btn-container\">\r\n            <div className=\"btn\">\r\n              <Button type=\"primary\" onClick={this.handleStart}>\r\n                <span className=\"btn-span\">Пуск/пауза</span>\r\n              </Button>\r\n            </div>\r\n            <div className=\"btn\">\r\n              <Button type=\"primary\" onClick={this.handleReset}>\r\n                <span className=\"btn-span\">&nbsp;&nbsp;Сбросить&nbsp;</span>\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './ClockDisplay.css';\r\n\r\nexport default function ClockDisplay(props) {\r\n  const { currentTime, currentMs } = props;\r\n  return (\r\n    <>\r\n      <span className=\"heading\">Текущее время</span>\r\n      <div className=\"clock-display-wrapper\">\r\n        <div className=\"current-time-wrapper\">\r\n          <span className=\"current-time\">{currentTime}:</span>\r\n        </div>\r\n        <div className=\"current-ms-wrapper\">\r\n          <span className=\"current-time\">{currentMs}</span>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nClockDisplay.propTypes = {\r\n  currentTime: PropTypes.string,\r\n  currentMs: PropTypes.string,\r\n};\r\n","import React from 'react';\r\n\r\nimport './Clock.css';\r\nimport ClockDisplay from './ClockDisplay';\r\n\r\nexport default class Clock extends React.Component {\r\n  state = {\r\n    currentTime: new Date(),\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(() => this.tick(), 17);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    const newTime = new Date();\r\n    this.setState({\r\n      currentTime: newTime,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { currentTime } = this.state;\r\n    const ms = ('00' + currentTime.getMilliseconds().toString())\r\n      .split('')\r\n      .slice(-3)\r\n      .join('');\r\n    return (\r\n      <div className=\"timer-container\">\r\n        <ClockDisplay\r\n          currentTime={currentTime.toLocaleTimeString()}\r\n          currentMs={ms}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './TechnicalTask.css';\r\n\r\nexport default function TechnicalTask() {\r\n  return (\r\n    <div className=\"maim\">\r\n      <h1 className=\"technikal-task\">Техническое задание</h1>\r\n      <p>Есть страница с тремя табами: часы, таймер и обратный отсчет.</p>\r\n      <p>\r\n        <b>Компонент Часы:</b> Текущее время с миллисекундами.\r\n      </p>\r\n      <p>\r\n        <b>Компонент Секундомер:</b> Секундомер отсчитывает время с начала запуска, отображая\r\n        минуты, секунды и миллисекунды. Реализован в виде отдельного компонента Timer. Две кнопки:\r\n        пуск/пауза и сброс. При запуске время начинает отсчет с нуля. После паузы можно возобновить\r\n        или сбросить. Если сбросить в процессе отсчета &mdash; отсчет не останавливается. При\r\n        неактивной вкладке браузера секундомер продолжает работу в штатном режиме.\r\n      </p>\r\n      <p>\r\n        <b>Компонент Счетчик обратного времени:</b> Реализован в виде отдельного компонента\r\n        Countdown. Блок ввода начального времени (вынесен в отдельный компонент): можно установить\r\n        время с помощью двух полей (минуты и секунды) или слайдера (компонент Slider). <br /> Когда\r\n        перемещаешь слайдер &mdash; он должен изменять время с шагом 15 секунд. Ввод с клавиатуры в\r\n        поле минут ограничивается 720 минутами. Слайдер ограничен 60 минутами. Слайдер и текстовые инпуты связаны друг с другом\r\n        (меняют значение текстовых, если двигаем слайдер).\r\n        <br />\r\n        После запуска поля блокируются до сброса таймера.\r\n        <br /> Блок результата: Отображается время в минутах и секундах до конца обратного отсчета.\r\n        <br />\r\n        Отображается визуальный прогресс (через компонент Progress), сколько в процентах от\r\n        начального времени прошло.\r\n        <br /> По окончанию таймера проигрывается звуковой сигнал.\r\n        <br /> Блок управления: две кнопки &mdash; пуск/пауза и сброс.\r\n      </p>\r\n      <p>\r\n        <b>Используемые инструменты:</b> create-react-app &mdash; готовый генератор проекта со\r\n        сборкой. <br />\r\n        Antd &mdash; библиотека с готовыми компонентами. <br />\r\n        PropTypes &mdash; валидация props у компонентов.\r\n      </p>\r\n      <p>\r\n        <b>Требования:</b> Старт с create-react-app, scss, reset css/normalize.\r\n        <br /> Подключаем Eslint + Prettier + Husky. <br />\r\n        Делаем две команды: npm run lint и npm run lint:fix, которые запускают линтер (без\r\n        автофиксов и с ними), у итогового решения не должно быть ошибок линтера. Все props\r\n        компонентов описаны через PropTypes. Без Redux. Все зависимости подключаем через npm,\r\n        никаких CDN.\r\n        <br /> Деплой на github pages.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Tabs } from 'antd';\r\nimport Timer from './components/Timer/Timer';\r\nimport Countdown from './components/Countdown/Countdown';\r\nimport Clock from './components/Clock/Clock';\r\nimport TechnicalTask from './components/TechnicalTask/TechnicalTask';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const { TabPane } = Tabs;\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header className=\"app-header\">\r\n        <span className=\"link-github\"><a href=\"https://github.com/alexey-oblomov/timers\" alt=\"Ссылка на GutHub\">GitHub: https://github.com/alexey-oblomov/timers</a></span>\r\n        <h1>Таймеры</h1>\r\n      </header>\r\n      <div className=\"main\">\r\n        <div className=\"technical-task\">\r\n          <TechnicalTask />\r\n        </div>\r\n          <div className=\"app\">\r\n            <Tabs type=\"card\">\r\n              <TabPane tab=\"Часы\" key=\"1\">\r\n                <Clock />\r\n              </TabPane>\r\n              <TabPane tab=\"Секундомер\" key=\"2\">\r\n                <Timer />\r\n              </TabPane>\r\n              <TabPane tab=\"Счетчик обратного времени\" key=\"3\">\r\n                <Countdown />\r\n              </TabPane>\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}