import React from 'react';
import './TechnicalTask.css';

export default function TechnicalTask() {
  return (
    <div className="maim">
      <h1 className="technikal-task">Техническое задание.</h1>
      <p>Есть страница с тремя табами: часы, таймер и обратный отсчет.</p>
      <p>
        <b>Компонент Секундомер:</b> Секундомер отсчитывает время с начала
        запуска, отображая минуты, секунды и миллисекунды. Реализован в виде
        отдельного компонента Timer. Две кнопки: пуск/пауза и сброс. При запуске
        время начинает отсчет с нуля. После паузы можно возобновить или
        сбросить. Если сбросить в процессе отсчета &mdash; отсчет не
        останавливается.
      </p>
      <p>
        <b>Компонент Счетчик обратного времени:</b> Реализован в виде отдельного
        компонента Countdown. Блок ввода начального времени (вынесен в отдельный
        компонент): можно установить время с помощью двух полей (минуты и
        секунды) или слайдера (компонент Slider). <br /> Когда перемещаешь
        слайдер - он должен изменять время с шагом 15 секунд. Ввод с клавиатуры
        в поле минут ограничивается 720 минутами. Слайдер и текстовые инпуты
        связаны друг с другом (меняют значение текстовых, если двигаем слайдер).
        <br />
        После запуска поля блокируются до сброса таймера.
        <br /> Блок результата: Отображается время в минутах и секундах до конца
        обратного отсчета.
        <br />
        Отображается визуальный прогресс (через компонент Progress), сколько в
        процентах от начального времени прошло.
        <br /> По окончанию таймера проигрывается звуковой сигнал.
        <br /> Блок управления: две кнопки: пуск/пауза и сброс.
      </p>
      <p>
        <b>Используемые инструменты:</b> create-react-app &mdash; готовый
        генератор проекта со сборкой. <br />
        Antd &mdash; библиотека с готовыми компонентами. <br />
        PropTypes &mdash; валидация props у компонентов.
      </p>
      <p>
        <b>Требования:</b> Старт с create-react-app, scss, reset css/normalize.
        <br /> Подключаем Eslint + Prettier + Husky. <br />
        Делаем две команды: npm run lint и npm run lint:fix, которые запускают
        линтер (без автофиксов и с ними), у итогового решения не должно быть
        ошибок линтера. Все props компонентов описаны через PropTypes. Без
        Redux. Все зависимости подключаем через npm, никаких CDN.
        <br /> Деплой на github pages.
      </p>
    </div>
  );
}
